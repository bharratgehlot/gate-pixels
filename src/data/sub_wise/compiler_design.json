[
  {
    "id": 1,
    "type": "MCQ",
    "question": "Which phase of compiler is responsible for checking syntax errors?",
    "note": null,
    "options": ["Lexical Analysis", "Syntax Analysis", "Semantic Analysis", "Code Generation"],
    "correctAnswers": ["B"],
    "marks": 1,
    "negativeMarks": 0.33,
    "image": null,
    "subject": "Compiler Design"
  },
  {
    "id": 2,
    "type": "MCQ",
    "question": "Which of the following is NOT a token in most programming languages?",
    "note": null,
    "options": ["Keywords", "Identifiers", "Comments", "Operators"],
    "correctAnswers": ["C"],
    "marks": 1,
    "negativeMarks": 0.33,
    "image": null,
    "subject": "Compiler Design"
  },
  {
    "id": 3,
    "type": "MCQ",
    "question": "In a compiler, the symbol table is used to:",
    "note": null,
    "options": [
      "Store machine code",
      "Store information about identifiers",
      "Store syntax rules",
      "Store error messages"
    ],
    "correctAnswers": ["B"],
    "marks": 1,
    "negativeMarks": 0.33,
    "image": null,
    "subject": "Compiler Design"
  },
  {
    "id": 4,
    "type": "MCQ",
    "question": "Which parsing technique is used by most modern compilers?",
    "note": null,
    "options": ["Top-down parsing", "Bottom-up parsing", "Recursive descent", "LR parsing"],
    "correctAnswers": ["D"],
    "marks": 1,
    "negativeMarks": 0.33,
    "image": null,
    "subject": "Compiler Design"
  },
  {
    "id": 5,
    "type": "MCQ",
    "question": "What is the purpose of intermediate code generation?",
    "note": null,
    "options": [
      "To make compilation faster",
      "To enable machine independence",
      "To reduce memory usage",
      "To handle errors better"
    ],
    "correctAnswers": ["B"],
    "marks": 1,
    "negativeMarks": 0.33,
    "image": null,
    "subject": "Compiler Design"
  },
  {
    "id": 6,
    "type": "MCQ",
    "question": "Which of the following is a code optimization technique?",
    "note": null,
    "options": ["Dead code elimination", "Syntax checking", "Lexical analysis", "Symbol table creation"],
    "correctAnswers": ["A"],
    "marks": 1,
    "negativeMarks": 0.33,
    "image": null,
    "subject": "Compiler Design"
  },
  {
    "id": 7,
    "type": "MCQ",
    "question": "In which phase are semantic errors detected?",
    "note": null,
    "options": ["Lexical Analysis", "Syntax Analysis", "Semantic Analysis", "Code Generation"],
    "correctAnswers": ["C"],
    "marks": 1,
    "negativeMarks": 0.33,
    "image": null,
    "subject": "Compiler Design"
  },
  {
    "id": 8,
    "type": "MCQ",
    "question": "What does a lexical analyzer return to the parser?",
    "note": null,
    "options": ["Parse tree", "Abstract syntax tree", "Tokens", "Machine code"],
    "correctAnswers": ["C"],
    "marks": 1,
    "negativeMarks": 0.33,
    "image": null,
    "subject": "Compiler Design"
  },
  {
    "id": 9,
    "type": "MCQ",
    "question": "Which grammar is suitable for LR parsing?",
    "note": null,
    "options": ["Ambiguous grammar", "Left recursive grammar", "Right recursive grammar", "Unambiguous grammar"],
    "correctAnswers": ["D"],
    "marks": 1,
    "negativeMarks": 0.33,
    "image": null,
    "subject": "Compiler Design"
  },
  {
    "id": 10,
    "type": "MCQ",
    "question": "What is the main advantage of using a compiler over an interpreter?",
    "note": null,
    "options": [
      "Faster development",
      "Better error messages",
      "Faster execution",
      "Less memory usage"
    ],
    "correctAnswers": ["C"],
    "marks": 1,
    "negativeMarks": 0.33,
    "image": null,
    "subject": "Compiler Design"
  }
]